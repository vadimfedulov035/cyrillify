name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  BINARY_NAME: cyrillify

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            New release of Cyrillify.
          draft: true
          prerelease: false

  build-and-upload:
    name: Build & Package
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: cargo build --release --locked

      - name: Package binary into an archive
        shell: bash
        run: |
          # Determine the platform-specific name and file extension.
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            PLATFORM_NAME="windows-x86_64"
            BINARY_PATH="./target/release/${{ env.BINARY_NAME }}.exe"
            ARCHIVE_NAME="${{ env.BINARY_NAME }}-${{ github.ref_name }}-${PLATFORM_NAME}.zip"
            
            # Use PowerShell to create the .zip archive on Windows.
            powershell -Command "Compress-Archive -Path '${BINARY_PATH}' -DestinationPath '${ARCHIVE_NAME}'"
          else
            # This 'else' block handles both Linux and macOS.
            PLATFORM_NAME="$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')-x86_64"
            BINARY_PATH="./target/release/${{ env.BINARY_NAME }}"
            ARCHIVE_NAME="${{ env.BINARY_NAME }}-${{ github.ref_name }}-${PLATFORM_NAME}.tar.gz"

            # Use tar to create the .tar.gz archive.
            tar -czvf "${ARCHIVE_NAME}" -C "./target/release" "${{ env.BINARY_NAME }}"
          fi
          
          # Make the final archive name available to the next step.
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream
